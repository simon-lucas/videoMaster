package StateMachine{import flash.utils.Timer;import flash.events.TimerEvent;	public class StateMachine	{		public var current:String;		public var previous:String;				public var states:Object;				public var tickCount:int = 0;		public var debug:Boolean=false;				public var tryState:String;		public var aSyncTimer:Timer;				public function StateMachine()		{			states = new Object();			aSyncTimer= new Timer(40,2000/40);			aSyncTimer.addEventListener(TimerEvent.TIMER, trySetState)		}				public function setState(name:String):void		{			//trace("target state is", name, "allowable from states", states[current].from )			if (debug) trace(name)			if(current == null)			{				current = name;				states[current].state.enter();				return;			}						if(current == name)			{				if (debug) trace("this object is already in the " + name + " state.");				return;			}						if(states[name].from.indexOf(current) != -1)			{				//trace(current, "states[current].locked", states[current].state.locked)				if (states[current].state.locked==false){					states[current].state.exit();					previous = current;					current = name;				}else{					trace(current, "will try aSync set State to ", tryState)					if (!aSyncTimer.running) {						tryState=name;						aSyncTimer.start();					}					return;				}							}			else			{				if (debug) trace(name + " cannot be used while in the " + current + " state.");				return;			}			states[current].state.previous = previous;			states[current].state.enter();			tickCount = 0;		}				public function trySetState(e:TimerEvent):void{			//trace(current, "tyring aSync set State to ", tryState, "crrent state locked is" , states[current].state.locked)			if (states[current].state.locked==false){				states[current].state.exit();				previous = current;				current = tryState;				states[current].state.previous = previous;				states[current].state.enter();				aSyncTimer.reset()				trace("succeeded aSync set State to ", tryState)			}		}				public function addState(name:String, stateObj:IState, fromStates:Array):void		{			if (debug) trace("add to:",name, "from: ", fromStates)			states[name] = {state:stateObj, from:fromStates.toString()};		}				public function getState():String{			return current;		}				public function update():void		{			states[current].state.update(tickCount++);		}	}}