package com.spiral.maryrose.charactercase.model{	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import XML;	import flash.utils.Timer;	import flash.display.Sprite;	import flash.events.IOErrorEvent;public class XMLSettingsLoader extends Sprite{		private var url:String;	private var myXML:XML;	private var myLoader:URLLoader;	public static const XMLLOADED:String="onXMLLoaded";		public function XMLSettingsLoader()	{		super();	}	/*	* @updateInt - milliseconds	*/	public function init(url:String):void{		this.url=url;		loadXML();	}	public function loadXML():void{				myLoader = new URLLoader();		myLoader.load(new URLRequest(url));		myLoader.addEventListener(Event.COMPLETE, xmlLoaded);		myLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		}		public function xmlLoaded(e:Event):void{		myLoader.removeEventListener(Event.COMPLETE, xmlLoaded);		myXML = new XML(e.target.data);		parseXML();	}		public function parseXML():void{				/***		* BASIC APP SETTINGS		**/		if (myXML.settings.cursor.text()=="true"){				Config.cursor=true;		}else{				Config.cursor=false;		}				if (myXML.settings.fullscreen.text()=="true"){				Config.fullscreen=true;		}else{				Config.fullscreen=false;		}					if (myXML.settings.debugOn.text()=="true"){				Config.debugOn=true;		}else{				Config.debugOn=false;		}				if (myXML.fps.text()=="true"){				Config.fps=true;		}else{				Config.fps=false;		}				if (myXML.show_keyboard.text()=="true"){				Config.showkeyboard=true;		}else{				Config.showkeyboard=false;		}						Config.DELAYTIME = uint(myXML.delayplaytime.text());									Config.timeoutlength=Number(myXML.timeoutlength.text());		trace("pp",myXML.settings.objectXLoc.text())		Config.objectXLoc=Number(myXML.settings.objectXLoc.text());				/*Config.title=myXML.title.text();		Config.saverText[0]=myXML.saver.(@id=="1").toString();		Config.saverText[1]=myXML.saver.(@id=="2").toString();*/				/*Config.QTIME=Number(myXML.questiontime.text());		Config.FTIME=Number(myXML.feedbacktime.text());		Config.RTIME=Number(myXML.resulttime.text());*/								/*Config.introductionText[0]=myXML.introduction.(@id=="1").toString();		Config.introductionText[1]=myXML.introduction.(@id=="2").toString();		Config.introductionText[2]=myXML.introduction.(@id=="3").toString();		Config.introductionText[3]=myXML.introduction.(@id=="4").toString();*/						//*****		// OBJECTS		//*****		var objects:XMLList= myXML.objects.object;		Config.objectList=objects;				/*main video file*/				Config.mainvideo=myXML.mainvideo.text();		/**		 * KEYS		 */		Config.keys= Vector.<String>(myXML.keys.toString().split(","));						/**		* TEXT WILL HERE		*/				Config.title=myXML.title.text();		/*				var titles:XMLList = myXML.title;				Config.titles=[];				for each (var titleElement:XML in titles) {					Config.titles.push(titleElement)								}*/				dispatchEvent(new Event(XMLLOADED));	}	public function ioErrorHandler(e:Event):void{		trace("ioErrorHandler::",e)	}}}