package com.spiral.views	{	import flash.display.Sprite;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.Event;	import com.spiral.events.AttractorEvent;	import flash.display.MovieClip;	import RoloDex.Global;	import RoloDex.RolodexAttractor;	import RoloApp;	import flash.events.KeyboardEvent;	import com.greensock.TimelineLite;	import com.greensock.TweenLite	import com.greensock.easing.Elastic;	import flash.geom.Point;	import com.greensock.TweenMax;	import caurina.transitions.*	import flash.utils.setTimeout;	/*e.g. subclass Attractor in FLash*/	public class Attractor extends MovieClip	{		public var timer:Timer;		public var titletext:String;		public var counter:uint;		public var timeoutsecs:uint;		public var debug:Boolean=false;		public var warningMode:Boolean=false;		public var warning:WarningSprite;		public var roloDex:RolodexAttractor;		private const ROLO_X:int = 580;		private const ROLO_Y:int = 466;		private const RSCALE:Number = 1;		private var textTimer1:Timer;		private var textTimer2:Timer;		private var str1:String;		private var str2:String;		private var aState:uint=1;		private var dirs=[];				public var tl:TimelineLite				public function Attractor()		{			super()					}				public function initialize(e:Event=null):void{			timeoutsecs= Number(Global.configData.config.timeoutsecs)			timer = new Timer(1000,timeoutsecs);			timer.addEventListener(TimerEvent.TIMER_COMPLETE,showAttractor);			timer.addEventListener(TimerEvent.TIMER,timeOutProgress);			visible=false;						textTimer1 = new Timer(40,0)				textTimer1.addEventListener(TimerEvent.TIMER,writeText1)			textTimer1.addEventListener(TimerEvent.TIMER_COMPLETE,animateRollo)			textTimer2 = new Timer(40,0)				textTimer2.addEventListener(TimerEvent.TIMER,writeText2)									str1 = text1.textbox.text			str2 = text2.textbox.text			text1.textbox.text = ""			text2.textbox.text = ""			dirs=["fwd", "bwd"]							}				public function showAttractor(e:TimerEvent=null):void{			if (debug) trace("showAttractor");			stopTimer();						visible=true;			//addEventListener(MouseEvent.CLICK,hideAttractor);			stage.removeEventListener(KeyboardEvent.KEY_DOWN,reset)			dispatchEvent(new AttractorEvent(AttractorEvent.TIMEOUT));			if (warningMode){				warningMode=false;				removeChild(warning);				removeEventListener(KeyboardEvent.KEY_DOWN,hideWarning);			}			aState=1					createStack()			//animateRollo(null)			startWrite(null)			//this.text1.x= 0					}				public function startScroll():void{			if (debug) trace("startScroll")			this.text1.x= 0			Tweener.addTween(this.text1, {x:-1067, time:1.5});			setTimeout(endScroll,1510)					}		public function endScroll():void{			this.text1.x = 1067			Tweener.addTween(this.text1, {x:0 , time:1.5});			if (debug) trace("endScroll1")										}						public function createStack():void{			if (debug) trace("A createStack")			roloDex = new RolodexAttractor();			roloDex.x = RoloApp.ROLO_X;			roloDex.y = RoloApp.ROLO_Y;			roloDex.z = RoloApp.ROLO_Z + 200	;			roloDex.rotationY=RoloApp.ROLO_YROT			roloDex.addEventListener("onCycleEnd",startWrite)			//Setting a nonzero z position creates the roloDex.transform.matrix3D member			//object, needed for rotating the object with the Matrix3D approach			addChild(roloDex);			roloDex.init()		}				public function startWrite(e:Event):void{				if (debug) trace("startWrite")			textTimer1.reset()			textTimer2.reset()			text1.textbox.text=""			text2.textbox.text=""			this["text"+1].textbox.appendText(this["str"+1].charAt(0))			this["text"+2].textbox.appendText(this["str"+2].charAt(0))			textTimer1.repeatCount = this["str"+1].length			textTimer2.repeatCount = this["str"+2].length			textTimer1.start()			textTimer2.start()		}				public function writeText2(e:Event):void{			this["text"+2].textbox.appendText(this["str"+2].charAt(textTimer2.currentCount))									//counter++		}				public function writeText1(e:Event):void{			this["text"+1].textbox.appendText(this["str"+1].charAt(textTimer1.currentCount))			//counter++		}					public function animateRollo(e:Event):void{			roloDex.animate(dirs[aState-1])			if (aState==1) aState=2 else aState=1		}						public function timeOutProgress(e:TimerEvent):void{			//trace("timeOutProgress", timer.currentCount)			var timeoutwarning =  10;			 timeoutwarning= Math.floor(timeoutwarning);			if (debug) trace("timeOutProgress",timer.currentCount,timeoutsecs - timeoutwarning)						if (timer.currentCount == timeoutsecs - timeoutwarning){				dispatchEvent(new AttractorEvent(AttractorEvent.TIMEOUT_WARNING));				showWarning()			}			if (warningMode){				warning.timeout.text=String(timeoutsecs-timer.currentCount)			}		}				public function showWarning(e:Event=null):void{			warningMode=true;			warning=new WarningSprite();			addChild(warning);			visible=true;			dispatchEvent(new AttractorEvent("Warning"));			//addEventListener(KeyboardEvent.KEY_DOWN,hideWarning);		}		public function hideWarning(e:Event=null):void{			if (debug) trace("hideWarning")			warningMode=false;			removeChild(warning);			timer.reset();			timer.start();			visible=false;			dispatchEvent(new AttractorEvent("HideWarning"));			//removeEventListener(KeyboardEvent.KEY_DOWN,hideWarning);		}						public function hideAttractor(e:KeyboardEvent):void{			if (debug) trace("hideAttractor")			gotoAndStop(1)			stage.addEventListener(KeyboardEvent.KEY_DOWN,reset)			//removeEventListener(MouseEvent.CLICK,hideAttractor);			timer.reset();			timer.start();			textTimer1.reset()			textTimer2.reset()			visible=false;			dispatchEvent(new AttractorEvent(AttractorEvent.ATTRACTOR_CLICKED));							roloDex.cleanUp()			removeChild(roloDex)		}		public function reset(e:KeyboardEvent=null):void{			if (timer.running){				timer.reset();				timer.start();				//trace("resetTimer",timer.currentCount);			}					}		public function stopTimer():void{			if (debug) trace("stopTimer");			timer.reset();			timer.stop();		}		public function startTimer():void{			if (debug) trace("startTimer");			reset();		}				/*	public function init(titletext:String)			{				this.titletext=titletext;				timer=new Timer(100,0);				timer.addEventListener(TimerEvent.TIMER,doAnimate)			}			public function doAnimate(t:TimerEvent)			{				if (counter< titletext.length-1){					counter++				}else{					counter=0;				}				titleField.appendText(titletext.charAt(counter))			}			public function startText()			{				counter=0;				timer.start();			}			public function stopText()			{				titleField.text="";				timer.stop();			}*/	}	}