//	VideoPlayer(copy) 1.1 updated by SImon//	updated OCT 2012 - Uses VideoCueEvent Dispatcher.//	If using progress bar. video mc needs videoMc.bar and videoMc.barBg//	Cue points : onMetaData, and onCuePoints//	for audio cue points, make markers in sound boooth and export as flv without video./* NB/ v1.1 ONLY RESPONDS TO navigation cue points*/package  com.spiral.views {		import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.events.AsyncErrorEvent;			import flash.display.MovieClip;		import flash.net.NetStream;		import flash.net.NetConnection;		import flash.media.Video;		import flash.media.SoundTransform;		import flash.events.NetStatusEvent;		import flash.display.Sprite;		import com.spiral.events.VideoCueEvent;	import com.spiral.events.VideoEventZ;	import flash.events.Event;	public class VideoPlayer extends Sprite {		private var videoPath : String;		private var video : Video = null;		private var mySound : SoundTransform;		private var connect_nc : NetConnection;		private var stream_ns : NetStream;		//		public var bar:MovieClip;		public var barBg:MovieClip;		private var vWidth : Number;		private var vHeight : Number;		private var videoX : Number;		private var videoY : Number;		private var cuePointsList : Array;		private var isLoop : Boolean;		private var progressTimer : Timer;		private var metadata : Object;		private var debug :Boolean = false;				private var navigationPoints:Array;//times only		private var navigationCuePoints:Array;				public var cuePointCount:uint=0;		public var currentCueIndex:uint;				public function VideoPlayer(vWidth : Number, vHeight : Number,videoX : Number, videoY : Number) {			if (debug) trace("VideoPlayer::VideoPlayer");			this.vWidth = vWidth;			this.vHeight = vHeight;			this.videoX = videoX;			this.videoY = videoY;			navigationPoints=new Array();			navigationCuePoints=new Array();			////for progress bar			progressTimer = new Timer(100);			progressTimer.addEventListener(TimerEvent.TIMER, onTick, false, 0, true);			initStream();		}				/* PUBLIC INTERFACE */		public function setMovie(videoPath : String) : void {			if (debug) trace("VideoPlayer::setMovie");			video.visible=false;			this.videoPath=videoPath;			stream_ns.play(videoPath);			stream_ns.pause();			stream_ns.seek(0);			if(contains(video) == false) {				//trace("VideoPlayer:add video "+videoPath);				addChild(video);							}			video.visible=true;		}				public function playMovie(isLoop:Boolean=false) : void {						if (debug) trace("VideoPlayer::playMovie", isLoop);			isLoop=isLoop;			stream_ns.play(videoPath);			initProgressBar();		}				/* PRIVATE INTERFACE */				private function initStream() : void {			if (debug) trace("VideoPlayer::initStream");									connect_nc = new NetConnection();			connect_nc.connect(null);			stream_ns = new NetStream(connect_nc);						var customClient : Object = new Object();			customClient.onMetaData = metaDataHandler;			customClient.onCuePoint = navigationCuePointHandler;			stream_ns.client = customClient;			stream_ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			stream_ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			init();		}		private function init() : void {			if (debug) trace("VideoPlayer::init");			if(video == null) {				video = new Video();				if (debug) trace("VideoPlayer:mew video!");			}						video.x = videoX;			video.y = videoY;			video.width = vWidth;			video.height = vHeight;			video.smoothing = true;				video.attachNetStream(stream_ns);			mySound = stream_ns.soundTransform;			adjustVolume(1);		}		private function asyncErrorHandler(event : AsyncErrorEvent) : void {			if (debug) {				trace("VideoPlayer::asyncErrorHandler ", event.text);			}			/////without asyncError, it will throw error 'onMetaData not ivoked'			////see http://www.adobe.com/devnet/flash/quickstart/metadata_cue_points/			//trace("asyncErrorHandler"+event.text);		}		private function netStatusHandler(p_evt : NetStatusEvent) : void {			if (debug) {				trace("VideoPlayer::netStatusHandler ", p_evt.info.code);			}		//	trace("netStatusHandler "+p_evt.info.code);			if (p_evt.info.code == "NetStream.FileStructureInvalid") {				//bug.appendText("The MP4's file structure is invalid.");			}else if (p_evt.info.code == "NetStream.NoSupportedTrackFound") {				//bug.appendText("The MP4 doesn't contain any supported tracks");			}else if (p_evt.info.code == "NetStream.Buffer.Flush") {				//bug.appendText("flucsh");			}else if (p_evt.info.code =="NetStream.Buffer.Full"){				//trace("NetStream.Buffer.Full");				//stream_ns.togglePause();				//stream_ns.seek(0);			}else if (p_evt.info.code == "NetStream.Play.Stop") {				trace("VideoPlayer:videoplayer internal stop");						if (video != null) {							if (this.contains(video)) {								stream_ns.pause();								endVideoPause();								dispatchEvent(new VideoEventZ(VideoEventZ.VIDEO_STOP));							}						}			}		}		private function endVideoPause() : void {			if (debug) trace("VideoPlayer::endVideoPause");					progressTimer.stop();			if (bar){				bar.width =barBg.width;			}			dispatchEvent(new Event("videoEnd"))		}		private function navigationCuePointHandler(infoObject : Object) : void {			if (debug) trace("VideoPlayer::navigationCuePointHandler");			//if (debug) trace("VideoPlayer:cuePoints",infoObject);			if (debug){				var key : String; 				for (key in infoObject) { 					trace(key + "::: " + infoObject[key]); 				}							}			if (infoObject.type == "navigation"){				for (var i:uint=0; i < navigationPoints.length; i++ ){					if (infoObject.time==navigationPoints[i]){						currentCueIndex=i;						if (debug) trace("Current cue is: ",currentCueIndex);						break;					}				}				/////Dispatch event here				var navCuePointEvt= new VideoCueEvent(VideoCueEvent.ON_NAVCUEPOINT);				navCuePointEvt.cueIndex = currentCueIndex;				dispatchEvent(navCuePointEvt);			}		}		public function metaDataHandler(infoObject : Object) : void {			if (debug) trace("VideoPlayer::metaDataHandler");						cuePointsList = new Array();			metadata=infoObject; //save the metadata						for each (var i : Object in infoObject.cuePoints) {				var oCue : Object = i;				if (debug) trace("\t\t" + i + "name : " + oCue.name + ", " + oCue.type+ ", " + oCue.time+ ", " + oCue.parameters);				if (oCue.type == "navigation"){					//trace("ADD", oCue.time)					navigationPoints.push(oCue.time);					navigationCuePoints.push(oCue);				}			}			if (debug) trace(navigationPoints)						cuePointCount=navigationPoints.length;			//		}		private function initProgressBar() : void {						if (debug) trace("VideoPlayer::initProgressBar");			// Progress bar movieclip contains 'bar' and 'barBg'			if (bar) {				bar.width =0.1;				progressTimer.start();			}		}		private function onTick(event : TimerEvent) : void {			if (debug) trace("VideoPlayer::onTick");			//trace("video tick")			dispatchEvent(new VideoEventZ(VideoEventZ.TICK))			if (metadata){				bar.width = stream_ns.time / metadata.duration * barBg.width;			}		}		/*		PUBLIC		*/		public function adjustVolume(vol : Number) : void {			if (debug) trace("VideoPlayer::adjustVolume");			mySound.volume = vol;			stream_ns.soundTransform = mySound;		}				public function removeVideo() : void {			if (debug) trace("VideoPlayer::removeVideo");			if(contains(video)) {				removeChild(video);			}					}				public function pauseMovie() : void {			if (debug) trace("VideoPlayer::pauseMovie");			stream_ns.pause();		}				public function resumeMovie() : void {			if (debug) trace("VideoPlayer::resumeMovie");			stream_ns.resume();		}				public function playMovieCue(n:uint) : void {			if (debug) trace("VideoPlayer::playMovieCue");			if (n > -1 && n < navigationPoints.length){				currentCueIndex=n;				stream_ns.pause();				stream_ns.seek(navigationPoints[n]);				stream_ns.resume();			}		}		public function clearVideoObject() : void {			if (debug) trace("VideoPlayer::clearVideoObject");						if (stream_ns != null)			{				stream_ns.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);				stream_ns.close();				mySound=null;				stream_ns = null;				}			if (connect_nc){				connect_nc.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false);				connect_nc.close();				connect_nc=null;			}			if (video != null) {				if(contains(video)) {					video.clear();					video.attachNetStream(null);					removeChild(video);					video = null;				}			}			if (progressTimer!=null){				progressTimer.removeEventListener(TimerEvent.TIMER, onTick);				progressTimer.stop();				progressTimer=null;			}		}		public function stopMovie() : void {			trace("stop movie")			if (debug) trace("VideoPlayer::stopMovie");						stream_ns.pause();			stream_ns.seek(0);			progressTimer.stop();		}	}}