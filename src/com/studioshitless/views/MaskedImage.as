package com.studioshitless.views{import flash.display.Sprite;import com.studioshitless.Utilities.DrawRectangle;import com.studioshitless.events.MaskedImageEvent;import com.studioshitless.events.ImageLoaderEvent;import flash.events.MouseEvent;import caurina.transitions.*;public class MaskedImage extends Sprite implements IMaskedImage{		public var imageMask:Sprite;	public var imageLoader:ImageLoader;	public var imageWidth:Number=12;	public var imageHeight:Number;	public var maskX:uint;	public var maskY:uint;	public var maskWidth:uint;	public var maskHeight:uint;	public var thumbX:Number;	public var thumbY:Number;	public var zoomX:uint;	public var zoomY:uint;	public var zoomWidth:uint;	public var zoomHeight:uint;	public var zoomed:Boolean;	public var thumbScale:Number;	public var zoomScale:Number;	public var originalWidth:Number;	public var originalHeight:Number;	public var thumbMaskWidth:Number;	public var thumbMaskHeight:Number;	public var _ratio:Number;	public var imageLoaderX:Number;	public var imageLoaderY:Number;	public var debug:Boolean=true;	public var oH:Number;	public var oW:Number;	public var masked:Boolean=false;		public function MaskedImage()	{		super();		imageLoader= new ImageLoader();		imageLoader.addEventListener(ImageLoaderEvent.LOADED,onImageLoaded)		imageLoader.addEventListener(MouseEvent.MOUSE_DOWN,zoomImage);	}		public function zoomImage(e:MouseEvent=null):void{		if (alpha==1){			if (zoomed==false){				zoomed=true;				Tweener.addTween(imageLoader,{scaleX:zoomScale,time:1});				Tweener.addTween(imageLoader,{scaleY:zoomScale,time:1});				//if (debug) trace(zoomX,zoomY,zoomScale*originalWidth);				thumbX=this.x;				thumbY=this.y;				imageLoaderX=imageLoader.x				imageLoaderY=imageLoader.y				Tweener.addTween(this,{x:zoomX-(zoomScale*originalWidth)-parent.x,time:1});				Tweener.addTween(this,{y:zoomY-parent.y,time:1});				thumbMaskWidth=imageMask.width				thumbMaskHeight=imageMask.height				Tweener.addTween(imageMask,{width:(zoomScale*originalWidth),time:1});				Tweener.addTween(imageMask,{height:(zoomScale*originalHeight), time:1});				Tweener.addTween(imageLoader,{x:0, time:1});				Tweener.addTween(imageLoader,{y:0, time:1,onComplete:finishImageZoom});				//if (debug) trace(imageLoader.x,imageMask.x)			}else{				zoomed=false;				Tweener.addTween(imageLoader,{scaleX:thumbScale,time:1});				Tweener.addTween(imageLoader,{scaleY:thumbScale,time:1});				Tweener.addTween(this,{x:thumbX,time:1})				Tweener.addTween(this,{y:thumbY,time:1});				Tweener.addTween(imageMask,{width:thumbMaskWidth,time:1});				Tweener.addTween(imageMask,{height:thumbMaskHeight, time:1});				Tweener.addTween(imageLoader,{x:imageLoaderX, time:1});				Tweener.addTween(imageLoader,{y:imageLoaderY, time:1});			}			var evt:MaskedImageEvent= new MaskedImageEvent(MaskedImageEvent.ZOOM);			evt.zoomed=zoomed			dispatchEvent(evt);		}	}		public function setZoomProps(zoomX, zoomY, zoomWidth, zoomHeight):void{		if (debug) trace("MaskedImage::setZoomProps")		this.zoomX=zoomX;		this.zoomY=zoomY;		this.zoomWidth=zoomWidth;		this.zoomHeight=zoomHeight;		if (debug) trace("setZoomProps")	}		public function finishImageZoom():void{		var evt:MaskedImageEvent= new MaskedImageEvent(MaskedImageEvent.FINISH_ZOOM);		dispatchEvent(evt);	}	public function loadImage(filePath:String):void{			imageLoader.loadImage(filePath)	}		public function addMask():void{			if (debug) trace("MaskedImage::addMask", imageWidth, imageHeight)			if (imageMask!=null && contains(imageMask)){			if (debug) trace("rem")			removeChild(imageMask)			}		imageMask=new Sprite();		var rect:DrawRectangle = new  DrawRectangle(0,0,imageWidth,imageHeight,0xFFFFFF);		imageMask.addChild(rect)				addChild(imageMask)		imageMask.alpha=.6		imageMask.x=0;		imageMask.y=0;		imageLoader.mask=imageMask;					}		public function onImageLoaded(e:ImageLoaderEvent):void{			originalWidth=imageLoader.width;		originalHeight=imageLoader.height;		if (debug) trace("onImageLoaded",originalWidth)		oW=imageLoader.width;		oH=imageLoader.height;		var scalex:Number = zoomWidth/originalWidth;		var scaley:Number = zoomHeight/originalHeight;		this.zoomScale=Math.min(scalex,scaley);				addChild(imageLoader);		var evt:MaskedImageEvent= new MaskedImageEvent(MaskedImageEvent.LOADED);		dispatchEvent(evt);	}		public function scaleTo(w:Number, h:Number, masked:Boolean=true):void{		if (debug) trace("MaskedImage::scaleTo")		imageWidth=w;		imageHeight=h;				var scaleXX:Number=imageWidth/imageLoader.width;		var scaleYY:Number=imageHeight/imageLoader.height;				//if (debug) trace("showImageAt",i.width)		thumbScale = Math.max(scaleXX,scaleYY);				imageLoader.scaleX = imageLoader.scaleY=thumbScale;			thumbX=	x-(imageLoader.width-imageWidth)/2;		thumbY=	y-(imageLoader.height-imageHeight)/2;			imageLoader.x=thumbX;		imageLoader.y=thumbY;		if (masked) addMask();		//if (debug) trace("after", imageLoader.width)	}	public function scaleToWidth(w:Number, h:Number,  masked:Boolean=true):void{		if (debug) trace("MaskedImage::scaleTo")		imageWidth=w;						if (debug) trace("scaleToWidth",this.imageLoader.width)		thumbScale = imageWidth/originalWidth//imageLoader.width;			imageLoader.scaleX = imageLoader.scaleY=thumbScale;			imageHeight=imageLoader.height;		thumbX=	0//x-(imageLoader.width-imageWidth)/2;		thumbY=	0//y-(imageLoader.height-imageHeight)/2;			imageLoader.x=thumbX;		imageLoader.y=thumbY;		if (masked) addMask();	}			public function reset():void{		if (debug) trace("MaskedImage::reset")		//zoomScale=0;		alpha=1;		zoomed=false;		imageWidth=0;		imageHeight=0;		thumbScale=1;		imageLoader.scaleX=imageLoader.scaleY=1;		imageLoader.x= imageLoader.y=0;		imageLoader.mask=null;		x=0;		y=0;		if (imageMask && contains(imageMask)) removeChild(imageMask)		imageMask=null;		thumbX=0;		thumbY=0;	}		public function dispose():void{		removeChild(imageMask)		imageMask=null;		imageLoader.removeEventListener(ImageLoaderEvent.LOADED,onImageLoaded)		imageLoader.removeEventListener(MouseEvent.MOUSE_DOWN,zoomImage);		removeChild(imageLoader)		imageLoader.dispose()	}		public function get ratio():Number{		return imageLoader.ratio;	}		public function removeMask():void	{		imageLoader.mask=null;		imageMask.visible=false;	}}}