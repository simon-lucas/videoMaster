package com.studioshitless.views{import flash.display.Sprite;import flash.display.Sprite;import com.studioshitless.Utilities.DrawRectangle;import com.studioshitless.events.MaskedImageEvent;import com.studioshitless.events.ImageLoaderEvent;import flash.events.MouseEvent;import caurina.transitions.*;public class NonMaskedImage extends MaskedImage implements IMaskedImage{	public var imageSprite:Sprite;	public var zoomAble:Boolean=false;	public function NonMaskedImage()	{		super();		imageLoader= new ImageLoader();		imageLoader.addEventListener(ImageLoaderEvent.LOADED,onImageLoaded)		imageLoader.addEventListener(MouseEvent.MOUSE_DOWN,zoomImage);	}		public override function zoomImage(e:MouseEvent=null):void{		if (zoomAble && alpha==1){			if (zoomed==false){				zoomed=true;				Tweener.addTween(imageSprite,{scaleX:zoomScale,time:1});				Tweener.addTween(imageSprite,{scaleY:zoomScale,time:1});				Tweener.addTween(imageMask,{scaleX:zoomScale,time:1.2});				Tweener.addTween(imageMask,{scaleY:zoomScale,time:1.2});				//trace(zoomX,zoomY,zoomScale*originalWidth);				thumbX=this.x;				thumbY=this.y;				Tweener.addTween(this,{x:zoomX-(zoomScale*originalWidth/2)-parent.x,time:1});				Tweener.addTween(this,{y:zoomY+(zoomScale*originalHeight/2)-parent.y,time:1,onComplete:finishImageZoom});			}else{				zoomed=false;				Tweener.addTween(imageSprite,{scaleX:thumbScale,time:1.2});				Tweener.addTween(imageSprite,{scaleY:thumbScale,time:1.2});				Tweener.addTween(imageMask,{scaleX:thumbScale,time:1});				Tweener.addTween(imageMask,{scaleY:thumbScale,time:1});				Tweener.addTween(this,{x:thumbX,time:1})				Tweener.addTween(this,{y:thumbY,time:1});			}		}		var evt:MaskedImageEvent= new MaskedImageEvent(MaskedImageEvent.ZOOM);		evt.zoomed=zoomed		dispatchEvent(evt);	}		public override function onImageLoaded(e:ImageLoaderEvent):void{		trace("onImageLoaded",originalWidth)		originalWidth=imageLoader.width;		originalHeight=imageLoader.height;		imageLoader.x=-originalWidth/2;		imageLoader.y=-originalHeight/2;		if (debug) trace("onImageLoaded",originalWidth)		var scalex:Number = zoomWidth/originalWidth;		var scaley:Number = zoomHeight/originalHeight;		this.zoomScale=Math.min(scalex,scaley);			imageSprite= new Sprite();		imageSprite.addChild(imageLoader);		addChild(imageSprite)		var evt:MaskedImageEvent= new MaskedImageEvent(MaskedImageEvent.LOADED);		dispatchEvent(evt);	}			public override function addMask():void{			if (debug) trace("MaskedImage::addMask", imageWidth, imageHeight)			if (imageMask!=null && contains(imageMask)){			if (debug) trace("rem")			removeChild(imageMask)			}		imageMask=new Sprite();		var recty:DrawRectangle = new  DrawRectangle(0,0,originalWidth,originalHeight,0xFFFFFF);		recty.x=-originalWidth/2		recty.y=-originalHeight/2		imageMask.addChild(recty)		addChild(imageMask)		imageMask.scaleX=imageMask.scaleY=imageSprite.scaleX		imageMask.alpha=1		//imageMask.x=imageLoader.x;		//imageMask.y=imageLoader.y;				/* do here */		imageSprite.mask=imageMask;			}			public override function scaleTo(w:Number, h:Number, masked:Boolean=true):void{		if (debug) trace("MaskedImage::scaleTo")		imageWidth=w;		imageHeight=h;			var scaleXX:Number=imageWidth/originalWidth;		var scaleYY:Number=imageHeight/originalHeight;				thumbScale = Math.min(scaleXX,scaleYY);				imageSprite.scaleX = imageSprite.scaleY=thumbScale;		if (masked) addMask();					}		public override function scaleToWidth(w:Number, h:Number,  masked:Boolean=true):void {		if (debug) trace("MaskedImage::scaleToWidth")		imageWidth=w;		imageHeight=h;			var scaleXX:Number=imageWidth/originalWidth;		var scaleYY:Number=imageHeight/originalHeight;				thumbScale = scaleXX;			imageSprite.scaleX = imageSprite.scaleY=thumbScale;		if (masked) addMask();			}					public override function reset():void{		if (debug) trace("MaskedImage::reset")	}		public override function dispose():void{		//removeChild(imageMask)		//imageMask=null;		imageLoader.removeEventListener(ImageLoaderEvent.LOADED,onImageLoaded)		imageLoader.removeEventListener(MouseEvent.MOUSE_DOWN,zoomImage);		removeChild(imageLoader)		imageLoader.dispose()	}		public override function get ratio():Number{		return imageLoader.ratio;	}		public override function removeMask():void	{		imageLoader.mask=null;		imageMask.visible=false;	}		}}