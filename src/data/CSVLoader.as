package data {		import flash.display.Sprite;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.events.Event;	import data.Global;			public class CSVLoader extends Sprite{		/*loader*/		private var loader:URLLoader;				public function CSVLoader() {			// constructor code			trace("load")			loader = new URLLoader();			//var request:URLRequest = new URLRequest("data/MM.P.01 BSAT - Print Collection Updated.csv");						loader.addEventListener(Event.COMPLETE, csvDataLoaded);				loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		}		public function loadCSV(filePath):void{			trace("filePath ",filePath)			var request:URLRequest = new URLRequest(filePath);				loader.load(request);		}				private function csvDataLoaded(e:Event):void{			loader.removeEventListener(Event.COMPLETE, csvDataLoaded);			var csv:URLLoader = URLLoader(e.target);			var dataLines = csv.data.split("\n")			var rowTitles = []//["AttractorTitle", "AttractorPrompt", "LanguageSelect", "LanguageButton2", "LanguageButton1", "MenuOption1", "MenuOption2", "MenuOption3", "MenuOption4", "Intro4","BackToMenu", "SkipIntro"];			for (var i:int = 0; i < dataLines.length; i++)			{				var dataLineArray:Array = dataLines[i].split("|")				if (dataLineArray[0]!="") rowTitles.push(dataLineArray[0])			}						for ( i =1; i < dataLines.length; i++)			{					dataLineArray = dataLines[i].split("|")				if (rowTitles.indexOf(dataLineArray[0])!=-1){					//trace(dataLineArray[0], dataLineArray[2])					Global.screenTextE[dataLineArray[0]] = dataLineArray[3];					Global.screenTextA[dataLineArray[0]] = dataLineArray[7];				}				//trace(dataLineArray[0])			}			onParsed()		}				private function onParsed():void{			dispatchEvent(new Event("onParsed"))		}				private function ioErrorHandler(e:IOErrorEvent):void{			trace("onError: " + e.type);		}				/* OLD ONE		*/								private function csvDataLoadedOLD(e:Event):void{			trace("csvDataLoaded")			loader.removeEventListener(Event.COMPLETE, csvDataLoaded);			var csv:URLLoader = URLLoader(e.target);			trace(csv)			var dataLines = csv.data.split("\n")					var ITEMROWS:uint=1			var coltitles=["name", "type", "artist", "title", "group", "note", "date", "image", "copyright", "keyImage"];			/* from row 3 to the end in steps of 3*/			for (var i:int =1; i < dataLines.length; i++)			{					trace(i)				var dataObj= new CSVData()				var dataLineArray:Array = dataLines[i].split("|") //the line of cells				//trace(dataLineArray)										if (dataLineArray[0]!="")  {					for (var j:uint = 0; j <coltitles.length; j++){						//trace("col ", coltitles[j], ": ", dataLineArray[j])						dataObj[coltitles[j]]=dataLineArray[j]					}					Global.horseCollection.push(dataObj)					trace(Global.horseCollection.length-1, Global.horseCollection[Global.horseCollection.length-1].artist, Global.horseCollection[Global.horseCollection.length-1].image)				}				//trace(Global.horseCollection[0].artist)			}			//Global.horseCollection.sortGroups()			//var artist:String = Global.horseCollection[34].artist			//var group:String = Global.horseCollection[34].group			//trace("X", Global.horseCollection.getGroup(artist, group))				/*Global.zipUpData = new ZipUpData()				Global.zipUpData.addEventListener("zipupLoaded", startApp)				Global.zipUpData.init()*/				//startApp(null)			//loadImages()		}	}	}