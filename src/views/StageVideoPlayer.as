package views{import flash.display.Sprite;import flash.display.MovieClip;import com.greensock.TweenLite;import flash.events.Event;import com.spiral.views.VideoPlayer;import flash.events.NetStatusEvent;import flash.events.StageVideoAvailabilityEvent;import flash.events.StageVideoEvent;import flash.media.StageVideoAvailability;import flash.media.StageVideo;import flash.net.NetConnection;import flash.net.NetStream;import flash.events.AsyncErrorEvent;import flash.geom.Rectangle;import flash.utils.Timer;import flash.events.TimerEvent;import com.spiral.events.VideoEventZ;import data.Global;public class StageVideoPlayer extends Sprite{	var stageVideo:StageVideo			var debug			var nc:NetConnection;	var v: VideoPlayer	var ns : NetStream;	var progressTimer:Timer;	public var bar:Sprite	public var barBg:Sprite	var metadata:Object	var usingStageVideo:Boolean = false;	var vidName:String;		public function StageVideoPlayer()	{		super();	}		public function init(vidName:String):void{		this.vidName=vidName				stage.addEventListener(StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY, onStageVideoState);		////for progress bar				progressTimer = new Timer(100);		progressTimer.addEventListener(TimerEvent.TIMER, onTick, false, 0, true);	}		private function onStageVideoState(e:StageVideoAvailabilityEvent):void {		//trace("onStageVideoState", e.availability)		stage.removeEventListener(StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY, onStageVideoState);	    if (e.availability == StageVideoAvailability.AVAILABLE) {			usingStageVideo=true;			trace("video init:", this, this.parent)			        playSuperVideo()			//trace("ppp")	    } else {			usingStageVideo=false;			trace("no super")	        //playNormalVideo()	    }	}		public function playSuperVideo():void{				stageVideo = stage.stageVideos[0];		nc = new NetConnection();		//nc.addEventListener(NetStatusEvent.NET_STATUS, onNetStatusHandler);		nc.connect(null);		ns = new NetStream(nc);		ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);		ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);				var customClient : Object = new Object();		customClient.onMetaData = metaDataHandler;		//customClient.onCuePoint = navigationCuePointHandler;		ns.client = customClient;		stageVideo.attachNetStream(ns);		ns.play(vidName);		Global.videoPlaying = true;		progressTimer.start();		var videoRect= new Rectangle()		videoRect.x = 0;		videoRect.y = 0;		videoRect.width = 3840//stage.stageWidth;		videoRect.height = 2160 //stage.stageHeight;		stageVideo.viewPort = videoRect;	}		private function asyncErrorHandler(event : AsyncErrorEvent) : void {				trace("VideoPlayer::asyncErrorHandler ", event.text);				/////without asyncError, it will throw error 'onMetaData not ivoked'		////see http://www.adobe.com/devnet/flash/quickstart/metadata_cue_points/		//trace("asyncErrorHandler"+event.text);	}	private function netStatusHandler(p_evt : NetStatusEvent) : void {		if (debug) {			trace("VideoPlayer::netStatusHandler ", p_evt.info.code);		}	//	trace("netStatusHandler "+p_evt.info.code);		if (p_evt.info.code == "NetStream.FileStructureInvalid") {			//bug.appendText("The MP4's file structure is invalid.");		}else if (p_evt.info.code == "NetStream.NoSupportedTrackFound") {			//bug.appendText("The MP4 doesn't contain any supported tracks");		}else if (p_evt.info.code == "NetStream.Buffer.Flush") {			//bug.appendText("flucsh");		}else if (p_evt.info.code =="NetStream.Buffer.Full"){			//trace("NetStream.Buffer.Full");			//stream_ns.togglePause();			//stream_ns.seek(0);		}else if (p_evt.info.code == "NetStream.Play.Stop") {			//trace("VideoPlayer:videoplayer internal stop");			endVideoPause();		}	}		private function onTick(event : TimerEvent) : void {		//trace(ns.time)		if(metadata){			if (bar) bar.width = ns.time / metadata.duration * barBg.width;		}			}					public function metaDataHandler(infoObject : Object) : void {		if (debug) trace("VideoPlayer::metaDataHandler");		//trace("playong")				//cuePointsList = new Array();		metadata=infoObject; //save the metadata				/*for each (var i : Object in infoObject.cuePoints) {			var oCue : Object = i;			if (debug) trace("\t\t" + i + "name : " + oCue.name + ", " + oCue.type+ ", " + oCue.time+ ", " + oCue.parameters);			if (oCue.type == "navigation"){				//trace("ADD", oCue.time)				navigationPoints.push(oCue.time);				navigationCuePoints.push(oCue);			}		}*/		//if (debug) trace(navigationPoints)				//cuePointCount=navigationPoints.length;		//initProgressBar();	}		private function endVideoPause() : void {		Global.videoPlaying = false;		if (debug) trace("VideoPlayer::endVideoPause");		dispatchEvent(new VideoEventZ(VideoEventZ.VIDEO_STOP));		//if (ns) ns.seek(0);		progressTimer.stop();		//ns.resume();			}		public function playNormalVideo():void{		trace("playNormalVideo")		if (!v) {			v = new VideoPlayer(1920, 1080, 0, 0)			//v.addEventListener(VideoEventZ.TICK, doVideoProgress)			v.addEventListener("videoEnd", doVideoEnd)		}		//if (!v) v = new VideoPlayer(1920, 1080 , 0, 0) 		addChild(v)		//v.x=1920		v.setMovie(vidName)		v.playMovie(true)	}		public function doVideoEnd(e:Event):void{				//v.seek(0)		//v.playMovie()	}	public function stopStageVideo():void{		trace("stopStageVideo()")		if (ns != null)		{			ns.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			ns.close();			//mySound=null;			ns = null;			}		if (nc){			nc.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			//nc.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			nc.close();			nc=null;		}					}	public function stopVideo():void{		if (usingStageVideo){			stopStageVideo()		}else{		}		if(progressTimer!=null){			//progressTimer.removeEventListener(TimerEvent.TIMER, onTick);			progressTimer.stop();					}	}	public function showStage(stageName:String):void{					}		function removeSlides():void{			}		function showNextImage() {			}		function deInit(e:Event):void{				removeEventListener(Event.REMOVED_FROM_STAGE, deInit)	}}}